model{
	for(i in 1:Nsub) {
		Y[i] ~ dnorm(m[i],t[i])
		#S[i] ~ dcat(p[age.g[i]-lag,])
		#T[i] <- S[i]-1
		T[i] ~ dbern(p[age.g[i]-lag])
		S[i] <- T[i]+1
		m[i]<-(xi[1]*(1-T[i])+xi[2]*T[i])+psi[S[i]]*z[i]
		t[i]<-tau[S[i]]
		z[i] ~ dnorm(0,1)T(0,)
		y.rep[i] ~ dnorm(m[i],t[i])

# Discrepancy measures between observed and replicated data		
	  r[i]<-Y[i]-m[i] 
	  sr[i]<-r[i]/sqrt(t[i]) 
	  r.rep[i]<-y.rep[i]-m[i]
	  sr.rep[i]<-r.rep[i]/sqrt(t[i])
	  m2[i]<-pow(sr[i],2) 
	  m2.rep[i]<-pow(sr.rep[i],2)
	}

# Estimating mixture parameters
	for(j in 1:2){
		#xi0[j] ~ dunif(0,10)
		xi0[j] ~ dnorm(eta[j],zeta[j]/tau[j])T(0,)
		psi[j] ~ dnorm(0,0.01)
    sigma[j] ~ dt(0,0.01,1)T(0,) # half-cauchy with large scale on std. dev.
    #sigma[j] ~ dunif(0,100)     # uniform with large range on std. dev
    tau[j]<-1/pow(sigma[j],2)
    #tau[j] ~ dgamma(0.01,0.01)  # gamma with large range on precision
    #sigma[j]<-1/sqrt(tau[j])
		eta[j] ~ dnorm(0,0.001)		
		zeta[j] ~ dgamma(0.001,0.001)
	}
	
	xi[1:2]<-sort(xi0)
	for(k in 1:2){
		gamma[k]<-psi[k]/sigma[k]
		omega[k]<-sqrt(pow(sigma[k],2)+pow(psi[k],2))
	}

# Expected predictive deviance (EPD, Dagne 2013) or mean squared error for in-sample predictions
	epd<-sum(r2[])/(Nsub)
  
# Seroprevalence
  prev.max ~ dbeta(alpha.prevmax,beta.prevmax)

  for(j in 1:Nage){	
		prev0[j] ~ dbeta(alpha[j],beta[j])T(0,prev.max)
  }
  prev[1:Nage]<-sort(prev0)
  	
## Force of infection
  for(j in 1:(Nage-2)){
		foi0[j]<-((4*prev[j+1]-3*prev[j]-prev[j+2])/2)/(1-prev[j])
   }
  foi0[Nage-1]<-foi0[Nage-2]
  foi0[Nage]<-foi0[Nage-1]
  for(j in 1:Nage){
    foi[j]<-ifelse(foi0[j]<0,0,foi0[j])
  }
    
  # Smoothing of FOI
  fois[1] <- (3*foi[1]+2*foi[2]+foi[3])/6
	fois[2] <- (foi[1]+3*foi[2]+foi[3])/5
  for(h in 3:(Nage-2)){
    fois[h] <- (foi[h-2]+2*foi[h-1]+3*foi[h]+2*foi[h+1]+foi[h+2])/9
	}
	fois[Nage-1] <- (foi[Nage-2]+3*foi[Nage-1]+foi[Nage])/5
	fois[Nage] <- (foi[Nage-2]+2*foi[Nage-1]+3*foi[Nage])/6
		 
	for(j in 1:Nage){
    #p[j,1]<-1-prev[j]
    p[j]<-prev[j]
    alpha[j] ~ dgamma(0.01,0.01)
    beta[j] ~ dgamma(0.01,0.01)
    #alpha[j] ~ dnorm(0,0.001)T(0,)
    #beta[j] ~ dnorm(0,0.001)T(0,)
  }
  	
# Remaining fraction of susceptible
  f <- 1-prev.max

# Posterior predictive p-value
	Tstat<-mean(m2[])
	Tstat.rep<-mean(m2.rep[])
	ppp<-step(Tstat.rep-Tstat)
}

